---
- name: Docker Volume Backup
  hosts: "{{ target_hosts | default('enabled_hosts') }}"
  gather_facts: yes
  vars:
    backup_type: "{{ backup_method | default('tar') }}"  # tar, zfs
    backup_location: "{{ backup_path | default('/opt/docker-backups') }}"
    stack_filter: "{{ stack | default('') }}"
    retention_days: "{{ retention | default(7) }}"
    
  tasks:
    - name: Create backup directory
      ansible.builtin.file:
        path: "{{ backup_location }}/{{ inventory_hostname }}"
        state: directory
        mode: '0750'
        
    - name: Find Docker volumes
      ansible.builtin.shell: |
        {% if stack_filter %}
        docker volume ls --filter "label=com.docker.compose.project={{ stack_filter }}" --format '{{.Name}}'
        {% else %}
        docker volume ls --format '{{.Name}}'
        {% endif %}
      register: volumes_list
      changed_when: false
      
    - name: Get volume mount points
      ansible.builtin.shell: |
        docker volume inspect {{ item }} --format '{{.Mountpoint}}'
      register: volume_paths
      loop: "{{ volumes_list.stdout_lines }}"
      when: volumes_list.stdout_lines | length > 0
      changed_when: false
      
    # ZFS backup method
    - name: ZFS snapshot backup
      block:
        - name: Create ZFS snapshots
          ansible.builtin.shell: |
            zfs snapshot {{ zfs_dataset }}/{{ item }}@backup_{{ ansible_date_time.epoch }}
          loop: "{{ volumes_list.stdout_lines }}"
          when: volumes_list.stdout_lines | length > 0
          register: zfs_snapshots
          
        - name: Send ZFS snapshots to backup location
          ansible.builtin.shell: |
            zfs send {{ zfs_dataset }}/{{ item }}@backup_{{ ansible_date_time.epoch }} | \
            gzip > {{ backup_location }}/{{ inventory_hostname }}/{{ item }}_{{ ansible_date_time.date }}.zfs.gz
          loop: "{{ volumes_list.stdout_lines }}"
          when: zfs_snapshots is succeeded
          
      when: backup_type == 'zfs' and zfs_capable | default(false)
      
    # Traditional tar backup method
    - name: Traditional tar backup
      block:
        - name: Stop containers before backup (if requested)
          ansible.builtin.shell: |
            {% if stack_filter %}
            docker compose -f {{ docker_compose_path | default('/opt/docker-compose') }}/{{ stack_filter }}/docker-compose.yml down
            {% endif %}
          when: stop_containers | default(false)
          register: containers_stopped
          
        - name: Create tar backups
          ansible.builtin.archive:
            path: "{{ item.stdout }}"
            dest: "{{ backup_location }}/{{ inventory_hostname }}/{{ volumes_list.stdout_lines[loop.index0] }}_{{ ansible_date_time.date }}.tar.gz"
            format: gz
          loop: "{{ volume_paths.results }}"
          when: volume_paths.results | length > 0
          register: tar_backups
          
        - name: Restart containers if they were stopped
          ansible.builtin.shell: |
            {% if stack_filter %}
            docker compose -f {{ docker_compose_path | default('/opt/docker-compose') }}/{{ stack_filter }}/docker-compose.yml up -d
            {% endif %}
          when: containers_stopped is succeeded
          
      when: backup_type == 'tar'
      
    - name: Clean old backups
      ansible.builtin.find:
        paths: "{{ backup_location }}/{{ inventory_hostname }}"
        age: "{{ retention_days }}d"
        patterns: "*.tar.gz,*.zfs.gz"
      register: old_backups
      
    - name: Remove old backup files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      
    - name: Display backup summary
      ansible.builtin.debug:
        msg: |
          Backup Summary for {{ inventory_hostname }}:
          ==========================================
          Method: {{ backup_type.upper() }}
          Volumes backed up: {{ volumes_list.stdout_lines | length }}
          Backup location: {{ backup_location }}/{{ inventory_hostname }}
          Old backups removed: {{ old_backups.files | length }}
          
          Backed up volumes:
          {% for volume in volumes_list.stdout_lines %}
          - {{ volume }}
          {% endfor %}