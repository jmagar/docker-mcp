---
- name: Docker Cleanup Operations
  hosts: "{{ target_hosts | default('enabled_hosts') }}"
  gather_facts: yes
  vars:
    cleanup_type: "{{ cleanup_level | default('safe') }}"
    dry_run: "{{ dry_run_mode | default(false) }}"
    parallel_cleanup: "{{ parallel | default(true) }}"
    
  tasks:
    # Pre-cleanup validation
    - name: Validate cleanup type
      ansible.builtin.fail:
        msg: "Invalid cleanup_type. Must be one of: check, safe, moderate, aggressive"
      when: cleanup_type not in ['check', 'safe', 'moderate', 'aggressive']
      
    - name: Check Docker availability
      ansible.builtin.command: docker version
      register: docker_check
      failed_when: false
      changed_when: false
      
    - name: Skip host if Docker not available
      ansible.builtin.meta: end_host
      when: docker_check.rc != 0
      
    # Disk usage analysis
    - name: Get Docker disk usage summary
      ansible.builtin.command: docker system df
      register: disk_usage_summary
      changed_when: false
      
    - name: Get detailed Docker disk usage
      ansible.builtin.command: docker system df -v
      register: disk_usage_detailed
      changed_when: false
      failed_when: false
      
    - name: Parse disk usage for cleanup planning
      ansible.builtin.set_fact:
        cleanup_analysis:
          total_images: "{{ disk_usage_summary.stdout | regex_search('Images\\s+(\\d+)', '\\1') | first | default('0') }}"
          total_containers: "{{ disk_usage_summary.stdout | regex_search('Containers\\s+(\\d+)', '\\1') | first | default('0') }}"
          total_volumes: "{{ disk_usage_summary.stdout | regex_search('Local Volumes\\s+(\\d+)', '\\1') | first | default('0') }}"
          build_cache_size: "{{ disk_usage_summary.stdout | regex_search('Build Cache\\s+\\d+\\s+\\d+\\s+([0-9.]+[KMGT]?B)', '\\1') | first | default('0B') }}"
      
    # Cleanup candidates discovery
    - name: Find stopped containers
      ansible.builtin.shell: docker ps -a --filter status=exited --format '{{.Names}}' | head -20
      register: stopped_containers
      changed_when: false
      
    - name: Find unused networks
      ansible.builtin.shell: docker network ls --filter dangling=true --format '{{.Name}}' | head -10
      register: unused_networks  
      changed_when: false
      
    - name: Find dangling images
      ansible.builtin.shell: docker images -f dangling=true --format '{{.Repository}}:{{.Tag}}' | head -10
      register: dangling_images
      changed_when: false
      
    - name: Find unused volumes
      ansible.builtin.shell: docker volume ls --filter dangling=true --format '{{.Name}}' | head -10
      register: unused_volumes
      changed_when: false
      
    # Check-only mode: Display analysis without cleanup
    - name: Display cleanup analysis (check mode)
      ansible.builtin.debug:
        msg: |
          Docker Cleanup Analysis for {{ inventory_hostname }}:
          ====================================================
          
          Current State:
          - Images: {{ cleanup_analysis.total_images }}
          - Containers: {{ cleanup_analysis.total_containers }}
          - Volumes: {{ cleanup_analysis.total_volumes }}
          - Build Cache: {{ cleanup_analysis.build_cache_size }}
          
          Cleanup Candidates:
          - Stopped Containers: {{ stopped_containers.stdout_lines | length }}
          - Unused Networks: {{ unused_networks.stdout_lines | length }}
          - Dangling Images: {{ dangling_images.stdout_lines | length }}
          - Unused Volumes: {{ unused_volumes.stdout_lines | length }}
          
          {% if stopped_containers.stdout_lines %}
          Stopped Containers:
          {% for container in stopped_containers.stdout_lines[:5] %}
          - {{ container }}
          {% endfor %}
          {% if stopped_containers.stdout_lines | length > 5 %}
          ... and {{ stopped_containers.stdout_lines | length - 5 }} more
          {% endif %}
          {% endif %}
          
          Cleanup Levels Available:
          - safe: Remove stopped containers, unused networks, build cache
          - moderate: Safe cleanup + unused images  
          - aggressive: Moderate cleanup + unused volumes (⚠️  DATA RISK)
      when: cleanup_type == 'check'
      
    # Safe cleanup: containers, networks, build cache
    - name: Safe cleanup - Remove stopped containers
      ansible.builtin.command: docker container prune -f
      register: container_cleanup
      when: cleanup_type in ['safe', 'moderate', 'aggressive'] and not dry_run
      
    - name: Safe cleanup - Remove unused networks
      ansible.builtin.command: docker network prune -f
      register: network_cleanup
      when: cleanup_type in ['safe', 'moderate', 'aggressive'] and not dry_run
      
    - name: Safe cleanup - Remove build cache
      ansible.builtin.command: docker builder prune -f
      register: builder_cleanup
      when: cleanup_type in ['safe', 'moderate', 'aggressive'] and not dry_run
      
    # Moderate cleanup: add unused images
    - name: Moderate cleanup - Remove unused images
      ansible.builtin.command: docker image prune -a -f
      register: image_cleanup
      when: cleanup_type in ['moderate', 'aggressive'] and not dry_run
      
    # Aggressive cleanup: add volumes (DANGEROUS)
    - name: Aggressive cleanup warning
      ansible.builtin.pause:
        prompt: |
          ⚠️  WARNING: AGGRESSIVE CLEANUP ⚠️
          
          You are about to remove unused Docker volumes on {{ inventory_hostname }}.
          This may permanently delete application data!
          
          Unused volumes to be removed:
          {% for volume in unused_volumes.stdout_lines[:10] %}
          - {{ volume }}
          {% endfor %}
          
          Press ENTER to continue or Ctrl+C to abort...
      when: cleanup_type == 'aggressive' and not dry_run and unused_volumes.stdout_lines | length > 0
      
    - name: Aggressive cleanup - Remove unused volumes
      ansible.builtin.command: docker volume prune -f
      register: volume_cleanup
      when: cleanup_type == 'aggressive' and not dry_run
      
    # Dry run notifications
    - name: Display dry run actions
      ansible.builtin.debug:
        msg: |
          DRY RUN: Would perform {{ cleanup_type }} cleanup on {{ inventory_hostname }}:
          
          {% if cleanup_type in ['safe', 'moderate', 'aggressive'] %}
          ✓ Remove {{ stopped_containers.stdout_lines | length }} stopped containers
          ✓ Remove {{ unused_networks.stdout_lines | length }} unused networks  
          ✓ Clear build cache ({{ cleanup_analysis.build_cache_size }})
          {% endif %}
          
          {% if cleanup_type in ['moderate', 'aggressive'] %}
          ✓ Remove {{ dangling_images.stdout_lines | length }} dangling images
          {% endif %}
          
          {% if cleanup_type == 'aggressive' %}
          ⚠️  Remove {{ unused_volumes.stdout_lines | length }} unused volumes (DATA RISK)
          {% endif %}
      when: dry_run and cleanup_type != 'check'
      
    # Post-cleanup verification and reporting
    - name: Get post-cleanup disk usage
      ansible.builtin.command: docker system df
      register: post_cleanup_usage
      changed_when: false
      when: not dry_run and cleanup_type != 'check'
      
    - name: Parse cleanup results
      ansible.builtin.set_fact:
        cleanup_results:
          containers_removed: "{{ container_cleanup.stdout | regex_search('Total reclaimed space: (.+)', '\\1') | first | default('Unknown') if container_cleanup is defined else 'N/A' }}"
          networks_removed: "{{ network_cleanup.stdout | regex_search('Total reclaimed space: (.+)', '\\1') | first | default('Unknown') if network_cleanup is defined else 'N/A' }}"
          build_cache_cleared: "{{ builder_cleanup.stdout | regex_search('Total reclaimed space: (.+)', '\\1') | first | default('Unknown') if builder_cleanup is defined else 'N/A' }}"
          images_removed: "{{ image_cleanup.stdout | regex_search('Total reclaimed space: (.+)', '\\1') | first | default('Unknown') if image_cleanup is defined else 'N/A' }}"
          volumes_removed: "{{ volume_cleanup.stdout | regex_search('Total reclaimed space: (.+)', '\\1') | first | default('Unknown') if volume_cleanup is defined else 'N/A' }}"
      when: not dry_run and cleanup_type != 'check'
      
    - name: Display cleanup results
      ansible.builtin.debug:
        msg: |
          Docker Cleanup Results for {{ inventory_hostname }}:
          ==================================================
          
          Cleanup Type: {{ cleanup_type | upper }}
          {% if not dry_run and cleanup_type != 'check' %}
          
          Space Reclaimed:
          {% if cleanup_results.containers_removed != 'N/A' %}
          - Containers: {{ cleanup_results.containers_removed }}
          {% endif %}
          {% if cleanup_results.networks_removed != 'N/A' %}
          - Networks: {{ cleanup_results.networks_removed }}
          {% endif %}
          {% if cleanup_results.build_cache_cleared != 'N/A' %}
          - Build Cache: {{ cleanup_results.build_cache_cleared }}
          {% endif %}
          {% if cleanup_results.images_removed != 'N/A' %}
          - Images: {{ cleanup_results.images_removed }}
          {% endif %}
          {% if cleanup_results.volumes_removed != 'N/A' %}
          - Volumes: {{ cleanup_results.volumes_removed }}
          {% endif %}
          
          Post-Cleanup Status:
          {{ post_cleanup_usage.stdout }}
          {% endif %}
      when: cleanup_type != 'check'

# Summary report across all hosts
- name: Cleanup Summary Report
  hosts: localhost
  gather_facts: no
  run_once: true
  tasks:
    - name: Collect cleanup results from all hosts
      ansible.builtin.set_fact:
        all_cleanup_results: "{{ ansible_play_hosts | map('extract', hostvars, 'cleanup_results') | select('defined') | list }}"
      when: cleanup_type != 'check' and not dry_run
      
    - name: Display overall cleanup summary
      ansible.builtin.debug:
        msg: |
          
          =====================================
          Docker Cleanup Summary - {{ cleanup_type | upper }}
          =====================================
          
          Hosts processed: {{ ansible_play_hosts | length }}
          Cleanup type: {{ cleanup_type }}
          {% if dry_run %}Mode: DRY RUN{% else %}Mode: EXECUTED{% endif %}
          
          {% if cleanup_type == 'check' %}
          Analysis completed for all hosts. Review individual host reports above.
          
          To perform cleanup:
          - ansible-playbook docker-cleanup.yml -e cleanup_level=safe
          - ansible-playbook docker-cleanup.yml -e cleanup_level=moderate  
          - ansible-playbook docker-cleanup.yml -e cleanup_level=aggressive
          {% endif %}
          
          {% if not dry_run and cleanup_type != 'check' %}
          Total hosts cleaned: {{ all_cleanup_results | length | default(0) }}
          
          Next recommended actions:
          - Monitor Docker disk usage: docker system df
          - Schedule regular safe cleanups
          - Review application logs for any issues
          {% endif %}